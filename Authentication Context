import React, { createContext, useState, useEffect } from 'react';

// Create the Authentication Context
export const AuthContext = createContext();

// Authentication Provider Component
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);
  const [loading, setLoading] = useState(true);

  // Check for existing session on startup
  useEffect(() => {
    const checkAuthStatus = async () => {
      try {
        // Check local storage for existing token
        const storedToken = localStorage.getItem('ust_id_token');
        const storedUser = JSON.parse(localStorage.getItem('ust_id_user'));
        
        if (storedToken && storedUser) {
          // Validate token with server in a real app
          // For demo purposes, we'll just use the stored token
          setToken(storedToken);
          setUser(storedUser);
        }
      } catch (error) {
        console.error("Auth status check failed:", error);
        // Clear potentially corrupted storage
        localStorage.removeItem('ust_id_token');
        localStorage.removeItem('ust_id_user');
      } finally {
        setLoading(false);
      }
    };

    checkAuthStatus();
  }, []);

  // Login function
  const login = (newToken, userData) => {
    setToken(newToken);
    setUser(userData);
    
    // Save to local storage
    localStorage.setItem('ust_id_token', newToken);
    localStorage.setItem('ust_id_user', JSON.stringify(userData));
  };

  // Logout function
  const logout = () => {
    setToken(null);
    setUser(null);
    
    // Clear local storage
    localStorage.removeItem('ust_id_token');
    localStorage.removeItem('ust_id_user');
  };

  // Update user profile
  const updateUser = (updatedData) => {
    const updatedUser = { ...user, ...updatedData };
    setUser(updatedUser);
    localStorage.setItem('ust_id_user', JSON.stringify(updatedUser));
  };

  // Context value
  const value = {
    user,
    token,
    loading,
    isAuthenticated: !!token,
    login,
    logout,
    updateUser
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider;
